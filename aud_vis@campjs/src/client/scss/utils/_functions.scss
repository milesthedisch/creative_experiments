/**
 * Utils: Functions
 */

/**
 * em
 *
 * Converts px value to em
 *
 * @param {int} $target  - Value to be converted
 * @param {int} $context - The context the `$target` will be divided by
 * @return {string}
 */
@function em ($target, $context: getPropertyFromTypeScale(font-size, html, $CURRENT-BREAKPOINT), $breakpoint: $CURRENT-BREAKPOINT, $type-scale-map: $TYPE-SCALES-MAP) {

    // $context is string
    @if type-of($context) == string {

        // Set $context as the font-size of $context
        $context: getPropertyFromTypeScale(font-size, $context, $breakpoint, $type-scale-map);
    }

    @return #{$target / $context}em;
};

/**
 * lines
 *
 * @param {int} $lines   - Number of lines high you wish the element to be
 * @param {int} $context - Value of current font-size (Default: $DEFAULT-FONT-SIZE)
 * @return {string}
 */
@function lines ($lines: 1, $context: getPropertyFromTypeScale(font-size, html, $CURRENT-BREAKPOINT), $breakpoint: $CURRENT-BREAKPOINT, $type-scale-map: $TYPE-SCALES-MAP) {

    // $context is string
    @if type-of($context) == string {

        // Set $context as the font-size of $context
        $context: getPropertyFromTypeScale(font-size, $context, $breakpoint, $type-scale-map);
    }

    // Return the value of line-height
    @return em(($lines * $VERTICAL-GRID-HEIGHT), $context);
};

/**
 * getKeyOfIndexFromMap
 *
 * Returns the name of the key at $index of $map
 *
 * @param  {number} $index - The index of the key you want the name of
 * @param  {map}    $map   - The map you wish to search for $index in
 * @return {string}
 */
@function getKeyOfIndexFromMap ($map, $index) {

    // $map is a map
    @if type-of($map) == map {

        // $index is a number
        @if type-of($index) == number {

            // $index exists in $map
            @if length($map) >= $index {

                // Return the key of $index
                @return nth(map-keys($map), $index);
            }

            // $index does not exist in $map, throw error
            @else {
                @error ('`$index` of `#{$index}` does not exist in `$map`');
            }
        }

        // $index is not a number, throw error
        @else {
            @error ('`$index` of `#{$index}` is not a number');
        }
    }

    // $map is not a map, throw error
    @else {
        @error ('`$map` is not a map');
    }
};

/**
 * getIndexOfKeyFromMap
 *
 * Returns the index of the $key in $map
 *
 * @param  {map}    $map - The map you wish to search for $key in
 * @param  {string} $key - The key you wish to get the index of
 * @return {number}
 */
@function getIndexOfKeyFromMap ($map, $key) {

    // $map is a map
    @if type-of($map) == map {

        // $key exists in $map
        @if map-has-key($map, $key) {

            // Return the index of $key
            @return index(map-keys($map), $key);
        }

        // $key does not exist in $map, throw error
        @else {
            @error ('`$key` of `#{$key}` does not exist in `$map`');
        }
    }

    // $map is not a map, throw error
    @else {
        @error ('`$map` is not a map');
    }
};

/**
 * getValueOfKeyFromMap
 *
 * Returns the value of $key in $map
 *
 * @param  {map}           $map - The map you wish to search for the value of $key in
 * @param  {string}        $key - The key you wish to get the value for
 * @return {number|string}
 */
@function getValueOfKeyFromMap ($map, $key) {

    // $map is a map
    @if type-of($map) == map {

        // $key exists in $map
        @if map-has-key($map, $key) {
            @return map-get($map, $key);
        }

        // $key does not exist in $map, throw error
        @else {
            @error ('`$key` of `#{$key}` does not exist in `$map`');
        }
    }

    // $map is not a map, throw error
    @else {
        @error ('`$map` is not a map');
    }
};

/**
 * getTypeScaleFromBreakpoint
 *
 * Returns the value of $type-scale in $breakpoint of $type-scale-map
 * Searches recursively backwards through $type-scale-map if $type-scale is not found in $breakpoint
 *
 * @param  {string}        $type-scale - The property that you wish to get the value of
 * @param  {string}        $breakpoint - The breakpoint that you wish to search
 * @return {number|string}
 */
 @function getTypeScaleFromBreakpoint ($type-scale, $breakpoint: getKeyOfIndexFromMap($TYPE-SCALES-MAP, 1), $type-scale-map: $TYPE-SCALES-MAP, $breakpoint-map: $BREAKPOINTS-MAP) {

     // $breakpoint-map is a map
     @if type-of($breakpoint-map) == map {

         // $breakpoint exists in $breakpoint-map
         @if map-has-key($breakpoint-map, $breakpoint) {

             // $type-scale-map is a map
             @if type-of($type-scale-map) == map {

                 // $breakpoint exists in $type-scale-map
                 @if map-has-key($type-scale-map, $breakpoint) {

                     // $type-scale exists in $breakpoint
                     @if map-has-key(map-get($type-scale-map, $breakpoint), $type-scale) {

                         // Return the value of $type-scale
                         @return getValueOfKeyFromMap(map-get($type-scale-map, $breakpoint), $type-scale);
                     }

                     // $type-scale does not exist in $breakpoint
                     @else {

                         // $breakpoint is not the lowest breakpoint in $type-scale-map
                         @if index(map-keys($type-scale-map), $breakpoint) > 1 {

                             // Run this function again searching one breakpoint lower for $type-scale
                             @return getTypeScaleFromBreakpoint($type-scale, getKeyOfIndexFromMap($breakpoint-map, getIndexOfKeyFromMap($breakpoint-map, $breakpoint) - 1), $type-scale-map, $breakpoint-map);
                         }

                         // $breakpoint is the lowest breakpoint in $type-scale-map
                         @else {

                             // $type-scale does not exist in $type-scale-map, throw error
                             @error ('`$type-scale` of `#{$type-scale}` does not exist in `$type-scale-map`');
                         }
                     }
                 }

                 // $breakpoint does not exist in $type-scale-map
                 @else {

                     // $breakpoint is not the lowest breakpoint in $breakpoint-map
                     @if index(map-keys($breakpoint-map), $breakpoint) > 1 {

                         // Run this function again searching one breakpoint lower for $type-scale
                         @return getTypeScaleFromBreakpoint($type-scale, getKeyOfIndexFromMap($breakpoint-map, getIndexOfKeyFromMap($breakpoint-map, $breakpoint) - 1), $type-scale-map, $breakpoint-map);
                     }

                     // $breakpoint is the lowest breakpoint in $breakpoint-map
                     @else {

                         // $type-scale does not exist in $type-scale-map, throw error
                         @error ('`$type-scale` of `#{$type-scale}` does not exist in `$type-scale-map`');
                     }
                 }
             }

             // $type-scale-map is not a map, throw error
             @else {
                  @error ('`$type-scale-map` is not a map');
             }
         }

         // $breakpoint does not exist in $breakpoint-map, throw error
         @else {
              @error ('`$breakpoint` of `#{$breakpoint}` does not exist in `$breakpoint-map`');
         }
     }

     // $breakpoint-map is not a map, throw error
     @else {
          @error ('`$breakpoint-map` is not a map');
     }
 };

/**
 * getPropertyFromTypeScale
 *
 * Returns the value of $property of $type-scale in $breakpoint of $type-scale-map
 *
 * @param  {string}        $property       - The property you wish to get the value of
 * @param  {string}        $type-scale     - The type-scale you wish to get $property from
 * @param  {string}        $breakpoint     - The breakpoint you want to $property from $type-scale in
 * @param  {map}           $type-scale-map - The map you wish to search for $breakpoint
 * @return {number|string}
 */
@function getPropertyFromTypeScale ($property, $type-scale, $breakpoint: getKeyOfIndexFromMap($TYPE-SCALES-MAP, 1), $type-scale-map: $TYPE-SCALES-MAP, $breakpoint-map: $BREAKPOINTS-MAP) {

    // $breakpoint-map is a map
    @if type-of($breakpoint-map) == map {

        // $breakpoint exists in $breakpoint-map
        @if map-has-key($breakpoint-map, $breakpoint) {

            // $type-scale-map is a map
            @if type-of($type-scale-map) == map {

                // $breakpoint exists in $type-scale-map
                @if map-has-key($type-scale-map, $breakpoint) {

                    // $type-scale has $property
                    @if map-has-key(getTypeScaleFromBreakpoint($type-scale, $breakpoint, $type-scale-map, $breakpoint-map), $property) {

                        // Return the value of $property
                        @return map-get(getTypeScaleFromBreakpoint($type-scale, $breakpoint, $type-scale-map, $breakpoint-map), $property);
                    }

                    // $type-scale does not have $property, throw error
                    @else {
                        @error ('`$type-scale` of `#{$type-scale}` does not have `$property` of `#{$property}`');
                    }
                }

                // $breakpoint does not exist in $type-scale-map
                @else {

                    // $breakpoint is not the lowest breakpoint in $breakpoint-map
                    @if index(map-keys($breakpoint-map), $breakpoint) > 1 {

                        // Run this function again searching one breakpoint lower for $type-scale
                        @return getPropertyFromTypeScale($property, $type-scale, getKeyOfIndexFromMap($breakpoint-map, getIndexOfKeyFromMap($breakpoint-map, $breakpoint) - 1), $type-scale-map, $breakpoint-map);
                    }

                    // $breakpoint is the lowest breakpoint in $breakpoint-map
                    @else {

                        // $type-scale does not exist in $type-scale-map, throw error
                        @error ('`$type-scale` of `#{$type-scale}` does not exist in `$type-scale-map`');
                    }
                }
            }

            // $type-scale-map is not a map, throw error
            @else {
                @error ('`$type-scale-map` is not a map');
            }
        }

        // $breakpoint does not exist in $breakpoint-map, throw error
        @else {
            @error ('`$breakpoint` of `#{$breakpoint}` does not exist in `$breakpoint-map`');
        }
    }

    // $breakpoint-map is not a map, throw error
    @else {
        @error ('`$breakpoint-map` is not a map');
    }
};

/**
 * getAllPropertiesFromTypeScale
 * @param  {string} $type-scale     - The type scale you wish to get the properties of
 * @param  {string} $breakpoint:    - The breakpoint you wish to get $type-scale from
 * @param  {map}    $type-scale-map - The map you wish to search for $breakpoint
 * @return {map}
 */
@function getAllPropertiesFromTypeScale ($type-scale, $breakpoint: getKeyOfIndexFromMap($TYPE-SCALES-MAP, 1), $type-scale-map: $TYPE-SCALES-MAP, $breakpoint-map: $BREAKPOINTS-MAP) {

    // $breakpoint-map is a map
    @if type-of($breakpoint-map) == map {

        // $breakpoint exists in $breakpoint-map
        @if map-has-key($breakpoint-map, $breakpoint) {

            // $type-scale-map is a map
            @if type-of($type-scale-map) == map {

                // $breakpoint exists in $type-scale-map
                @if map-has-key($type-scale-map, $breakpoint) {

                    // Create an empty map to hold all properties of $type-scale
                    $properties: ();

                    // The index of $breakpoint in $breakpoint-map
                    $indexOfBreakpoint: index(map-keys($breakpoint-map), $breakpoint);

                    // $indexOfBreakpoint is greater than one
                    @if $indexOfBreakpoint > 1 {

                        // While $indexOfBreakpoint is greater than or equal to one
                        @while $indexOfBreakpoint >= 1 {

                            // Add the properties of $type-scale to $properties
                            $properties: map-merge(getTypeScaleFromBreakpoint($type-scale, getKeyOfIndexFromMap($breakpoint-map, $indexOfBreakpoint), $type-scale-map, $breakpoint-map), $properties);

                            // Decrement $indexOfBreakpoint
                            $indexOfBreakpoint: $indexOfBreakpoint - 1;
                        }

                        // Return $properties
                        @return $properties;
                    }

                    // $indexOfBreakpoint is one
                    @else {

                        // Return the properties of $type-scale
                        @return getTypeScaleFromBreakpoint($type-scale, $breakpoint, $type-scale-map, $breakpoint-map);
                    }
                }

                // $breakpoint does not exist in $type-scale-map
                @else {

                    // $breakpoint is not the lowest breakpoint in $breakpoint-map
                    @if index(map-keys($breakpoint-map), $breakpoint) > 1 {

                        // Run this function again searching one breakpoint lower for $type-scale
                        @return getAllPropertiesFromTypeScale($type-scale, getKeyOfIndexFromMap($breakpoint-map, getIndexOfKeyFromMap($breakpoint-map, $breakpoint) - 1), $type-scale-map, $breakpoint-map);
                    }

                    // $breakpoint is the lowest breakpoint in $breakpoint-map
                    @else {

                        // $type-scale does not exist in $type-scale-map, throw error
                        @error ('`$type-scale` of `#{$type-scale}` does not exist in `$type-scale-map`');
                    }
                }
            }

            // $type-scale-map is not a map, throw error
            @else {
                @error ('`$type-scale-map` is not a map');
            }
        }

        // $breakpoint does not exist in $breakpoint-map, throw error
        @else {
            @error ('`$breakpoint` of `#{$breakpoint}` does not exist in `$breakpoint-map`');
        }
    }

    // $breakpoint-map is not a map, throw error
    @else {
        @error ('`$breakpoint-map` is not a map');
    }
};