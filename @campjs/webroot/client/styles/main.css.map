{"version":3,"sources":["main.css","utils/_variables.scss","utils/_functions.scss","utils/_mixins.scss","utils/_placeholders.scss","base/_reset.scss","base/_normalise.scss","base/_colours.scss","base/_typography.scss","layout/_header.scss","layout/_footer.scss","components/_debug.scss","components/_buttons.scss","components/_global-overlay.scss"],"names":[],"mappings":"AAAA,iBAAiB;ACAjB;;GAEG;AAQH;;;;;;;;;GASG;AASH;;;;;;;GAOG;ACnCH;;GAEG;AAEH;;;;;;;;GAQG;AAaH;;;;;;GAMG;AAcH;;;;;;;;GAQG;AAkCH;;;;;;;;GAQG;AAyBH;;;;;;;;GAQG;AAuBH;;;;;;;;;GASG;AA8EH;;;;;;;;;;GAUG;AAiEH;;;;;;GAMG;AC/TH;;GAEG;AAEH;;;;;;GAMG;AA0BH;;;;;;;;;;;;;;;;;;GAkBG;AAcH;;;;;;GAMG;AAgEH;;;;GAIG;AAgEH;;;;GAIG;AClNH;;GAEG;AAEH;EACI,uBAAuB;CAC1B;;AAED;EACI,wBAAwB;CAC3B;;AAGD;EACI,YAAY;EACZ,YAAY;EACZ,eAAe;CAClB;;ACjBD;;GAEG;AAGH;EACI,UAAU;EACV,uBAAuB;EACvB,qBACoB;EADpB,gBAEe;EAFf,4BAG2B;EAE3B,qBAAqB;EACrB,UAAU;EACV,WAAW;EACX,WAAW;EACX,yBAAyB;CAC5B;;AAGD;;;;;EAKI,eAAe;CAClB;;AAGD;;;;EAII,gBAAgB;CACnB;;AAGD;EACI,0BAA0B;EAC1B,kBAAkB;EAClB,eAAe;CAClB;;AC1CD;;GAEG;AAEH;EACI,+BAC8B;EAD9B,gBAEe;EAEf,aAAa;EACb,mBAAmB;EACnB,iBAAiB;EACjB,+BAAuB;MAAvB,2BAAuB;UAAvB,uBAAuB;EACvB,YAAY;CACf;;AAED;EACI,gBACe;EADf,4BAE2B;EAE3B,aAAa;EACb,iBAAiB;EACjB,mBAAmB;EACnB,mCAAmC;EACnC,YAAY;CACf;;AAED;EACI,UAAU;EACV,eAAe;EACf,aAAa;EACb,gBAAgB;EAChB,YAAY;EACZ,gCAAgC;CACnC;;AAGD;EACI,0BAA0B;CAC7B;;AAED;EACI,0BAA0B;CAC7B;;AAED;EACI,0BAA0B;CAC7B;;AChDD;;GAEG;ACFH;;GAEG;ALsDC;EACI,wBKnDwB;ELoDxB,8DAAQ;EACR,oTAG+E;EAC/E,iBKzD+C;EL0D/C,mBAT2E;CHqMlF;;AGpMG;EACI,wBKlDwB;ELmDxB,gEAAQ;EACR,8TAG+E;EAC/E,iBKxDiD;ELyDjD,mBAT2E;CH6MlF;;AG5MG;EACI,wBKjDwB;ELkDxB,6DAAQ;EACR,+SAG+E;EAC/E,iBKvD8C;ELwD9C,mBAT2E;CHqNlF;;AQlQD;EACI,wBAAwB;EACxB,8CAA6B;EAChC,8CAA8C;EAC9C,+CAA+C;CAC/C;;ALqJ2B;EAnEZ,gBAAW;EA4BX,mBAAc;EAOd,sBAAc;EAjBlB,iBAAa;CAqDI;;AAJD;EA5DZ,iBAAW;EAqBX,qBAAc;EAOd,sBAAc;EAjBlB,iBAAa;CAqDI;;AAJD;EA5DZ,kBAAW;EAqBX,oBAAc;EAOd,sBAAc;EAjBlB,iBAAa;CAqDI;;AAJD;EA5DZ,mBAAW;EAqBX,6BAAc;EAOd,sBAAc;EAjBlB,iBAAa;CAqDI;;AAJD;EAhCZ,sBAAc;EA5Bd,kBAAW;EAWf,iBAAa;EAUT,oBAAc;CA2CD;;AAJD;EAhCZ,sBAAc;EA5Bd,kBAAW;EAqBX,oBAAc;CA2CD;;AAJD;EAhCZ,sBAAc;EA5Bd,eAAW;EAqBX,mBAAc;CA2CD;;AAJD;EAhCZ,sBAAc;EA5Bd,oBAAW;EAqBX,6BAAc;CA2CD;;AAJD;EAhCZ,sBAAc;EA5Bd,oBAAW;EA4BX,0BAAc;CAoCD;;AA0DT;EACI,yBD7MW;EC8MX,sBAAiB;CACpB;;AAHD;EACI,yBD7MW;EC8MX,sBAAiB;CACpB;;AAHD;EACI,yBD7MW;EC8MX,WAAiB;CACpB;;AAHD;EACI,yBD7MW;EC8MX,sBAAiB;CACpB;;AAHD;EACI,yBD7MW;EC8MX,sBAAiB;CACpB;;AAHD;EACI,yBD7MW;EC8MX,YAAiB;CACpB;;AAjNb;EA+NgB;IACI,yBD9NO;IC+NP,sBAAiB;GACpB;EAHD;IACI,yBD9NO;IC+NP,sBAAiB;GACpB;EAHD;IACI,yBD9NO;IC+NP,WAAiB;GACpB;EAHD;IACI,yBD9NO;IC+NP,sBAAiB;GACpB;EAHD;IACI,yBD9NO;IC+NP,sBAAiB;GACpB;EAHD;IACI,yBD9NO;IC+NP,YAAiB;GACpB;CHiJxB;;AGnXO;EA+NgB;IACI,wBD9NO;IC+NP,sBAAiB;GACpB;EAHD;IACI,wBD9NO;IC+NP,sBAAiB;GACpB;EAHD;IACI,wBD9NO;IC+NP,WAAiB;GACpB;EAHD;IACI,wBD9NO;IC+NP,sBAAiB;GACpB;EAHD;IACI,wBD9NO;IC+NP,sBAAiB;GACpB;EAHD;IACI,wBD9NO;IC+NP,YAAiB;GACpB;CH4KxB;;AG9YO;EA+NgB;IACI,wBD9NO;IC+NP,sBAAiB;GACpB;EAHD;IACI,wBD9NO;IC+NP,sBAAiB;GACpB;EAHD;IACI,wBD9NO;IC+NP,WAAiB;GACpB;EAHD;IACI,wBD9NO;IC+NP,sBAAiB;GACpB;EAHD;IACI,wBD9NO;IC+NP,sBAAiB;GACpB;EAHD;IACI,wBD9NO;IC+NP,YAAiB;GACpB;CHuMxB;;AGzaO;EA+NgB;IACI,wBD9NO;IC+NP,sBAAiB;GACpB;EAHD;IACI,wBD9NO;IC+NP,sBAAiB;GACpB;EAHD;IACI,wBD9NO;IC+NP,WAAiB;GACpB;EAHD;IACI,wBD9NO;IC+NP,sBAAiB;GACpB;EAHD;IACI,wBD9NO;IC+NP,sBAAiB;GACpB;EAHD;IACI,wBD9NO;IC+NP,YAAiB;GACpB;CHkOxB;;ASxdD;;GAEG;ACFH;;GAEG;ACFH;;GAEG;AAEH;EACI,mEAA2B;EAA3B,iEAA2B;EAC3B,UAAU;EACV,eAAe;EACf,iBTc+B;ESb/B,gBAAgB;EAChB,SAAS;EACT,iCAAyB;EAAzB,yBAAyB;CAY5B;;ARHO;EQhBR;IAcgB,sCAA0F;GAKzG;CX0dA;;AG7dO;EQhBR;IAcgB,wCAA0F;GAKzG;CXgeA;;AGneO;EQhBR;IAcgB,uCAA0F;GAKzG;CXseA;;AGzeO;EQhBR;IAcgB,wCAA0F;GAKzG;CX4eA;;AG/eO;EQhBR;IAcgB,yCAA0F;GAKzG;CXkfA;;AYzgBD;;GAEG;ACFH;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AAEH;EACI,cAAc;CACjB;;AAED;EACI,iBAAiB;CAoDpB;;AArDD;EAIQ,gBAAgB;EAChB,eAAe;EACf,aAAa;EACb,QAAQ;EACR,iBAAiB;EACjB,gBAAgB;EAChB,OAAO;EACP,YAAY;CAyCf;;AApDL;EAcY,qCAAsB;EACtB,eAAe;EACf,aAAa;EACb,YAAY;CAef;;AAhCT;EAoBgB,oBAAoB;EACpB,mBAAiB;EACjB,uBAAuB;CAS1B;;AA/Bb;EAyBoB,0BAA0B;EAC1B,eAAe;EACf,gBAAgB;EAChB,eAAe;EACf,WAAW;CACd;;AA9BjB;EAoCgB,eAAe;CAclB;;AAlDb;EAuCoB,eAAe;EACf,aAAa;EACb,WAAW;CAQd;;AAjDjB;EA4CwB,aAAa;EACb,UAAU;EACV,iBAAiB;EACjB,YAAY;CACf","file":"main.css","sourcesContent":["@charset \"UTF-8\";\n/**\n * Utils: Variables\n */\n/**\n * Breakpoints\n *\n * @key   {string} - Name of breakpoint\n * @value {string} - Type of breakpoint (min, max)\n * @value {int}    - Width that breakpoint starts\n * @value {int}    - Number of columns for grid\n * @value {int}    - Gutter width for each column\n * @value {int}    - Vertical Grid height\n */\n/**\n * Type-scales\n *\n * @key   {string}       - Name of breakpoint\n * @key   {string}       - Name of element\n * @key   {string}       - Property\n * @value {string | int} - Value of property\n */\n/**\n * Utils: Functions\n */\n/**\n * em\n *\n * Converts px value to em\n *\n * @param {int} $target  - Value to be converted\n * @param {int} $context - The context the `$target` will be divided by\n * @return {string}\n */\n/**\n * lines\n *\n * @param {int} $lines   - Number of lines high you wish the element to be\n * @param {int} $context - Value of current font-size (Default: $DEFAULT-FONT-SIZE)\n * @return {string}\n */\n/**\n * getKeyOfIndexFromMap\n *\n * Returns the name of the key at $index of $map\n *\n * @param  {number} $index - The index of the key you want the name of\n * @param  {map}    $map   - The map you wish to search for $index in\n * @return {string}\n */\n/**\n * getIndexOfKeyFromMap\n *\n * Returns the index of the $key in $map\n *\n * @param  {map}    $map - The map you wish to search for $key in\n * @param  {string} $key - The key you wish to get the index of\n * @return {number}\n */\n/**\n * getValueOfKeyFromMap\n *\n * Returns the value of $key in $map\n *\n * @param  {map}           $map - The map you wish to search for the value of $key in\n * @param  {string}        $key - The key you wish to get the value for\n * @return {number|string}\n */\n/**\n * getTypeScaleFromBreakpoint\n *\n * Returns the value of $type-scale in $breakpoint of $type-scale-map\n * Searches recursively backwards through $type-scale-map if $type-scale is not found in $breakpoint\n *\n * @param  {string}        $type-scale - The property that you wish to get the value of\n * @param  {string}        $breakpoint - The breakpoint that you wish to search\n * @return {number|string}\n */\n/**\n * getPropertyFromTypeScale\n *\n * Returns the value of $property of $type-scale in $breakpoint of $type-scale-map\n *\n * @param  {string}        $property       - The property you wish to get the value of\n * @param  {string}        $type-scale     - The type-scale you wish to get $property from\n * @param  {string}        $breakpoint     - The breakpoint you want to $property from $type-scale in\n * @param  {map}           $type-scale-map - The map you wish to search for $breakpoint\n * @return {number|string}\n */\n/**\n * getAllPropertiesFromTypeScale\n * @param  {string} $type-scale     - The type scale you wish to get the properties of\n * @param  {string} $breakpoint:    - The breakpoint you wish to get $type-scale from\n * @param  {map}    $type-scale-map - The map you wish to search for $breakpoint\n * @return {map}\n */\n/**\n * Utils: Mixins\n */\n/**\n * breakpoint\n *\n * Iterate through $BREAKPOINTS and generate media queries\n *\n * @param {string} $breakpoint - Key in $BREAKPOINTS map\n */\n/**\n * generateFont\n *\n * Generate font-face declaration\n * Assumes you follow the following directory structure:\n *\n * /\n * |- fonts/\n *   |- fontname\n *     |- fontname.eot\n *     |- fontname.woff\n *     |- fontname.ttf\n *     |- fontname.svg\n *\n * @param {string} $fontName - Name of the font to be used when declared\n * @param {string} $fontFileName - Filename of the font\n * @param {int} $fontWeight - Weight of the font (100, 200, 300, 400, 500, 600, 700, 800 | Default: 400)\n * @param {string} $fontStyle - Style of the font (normal, italic, oblique | Default: normal)\n */\n/**\n * setTypeScale\n *\n * @param {string} $type-scale - The style you wish to use from $TYPE-SCALES-MAP\n * @param {number} $context    - The context of the current type-scale\n * @param {string} $breakpoint - The breakpoint in which you wish to get the $style from\n */\n/**\n * generateTypeScaleStyles\n *\n * @param {map} $type-scale-map - The map you want to generate the typescales from (Default: $TYPE-SCALES-MAP)\n */\n/**\n * generateGridStyles\n *\n * @param {map} $type-scale-map - The map you want to generate the typescales from (Default: $TYPE-SCALES-MAP)\n */\n/**\n * Utils: Placeholders\n */\n* {\n  box-sizing: border-box;\n}\n\nhtml, body {\n  background-color: black;\n}\n\n.clearfix:after {\n  clear: both;\n  content: '';\n  display: table;\n}\n\n/**\n * Base: Reset\n */\n*, *:before, *:after {\n  border: 0;\n  box-sizing: border-box;\n  font-family: inherit;\n  font-size: 100%;\n  font-smoothing: antialiased;\n  line-height: inherit;\n  margin: 0;\n  outline: 0;\n  padding: 0;\n  vertical-align: baseline;\n}\n\naddress, article, aside, audio, blockquote,\ncanvas, dd, div, dl, fieldset, figcaption,\nfigure, footer, form, h1, h2, h3, h4, h5, h6,\nheader, hr, noscript, ol, output, p, pre,\nsection, ul, video {\n  display: block;\n}\n\na, abbr, b, bdo, br, button, cite, code, dfn,\nem, i, img, input, kbd, label, map, object, q,\nsamp, select, small, span, strong, sub, sup,\ntextarea, var {\n  display: inline;\n}\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n  display: table;\n}\n\n/**\n * Base: Normalise\n */\nhtml {\n  font-family: Arial, sans-serif;\n  font-size: 16px;\n  height: 100%;\n  line-height: 1.5em;\n  min-height: 100%;\n  text-size-adjust: 100%;\n  width: 100%;\n}\n\nbody {\n  font-size: 100%;\n  font-smoothing: antialiased;\n  height: 100%;\n  min-height: 100%;\n  position: relative;\n  text-rendering: optimizeLegibility;\n  width: 100%;\n}\n\nimg {\n  border: 0;\n  display: block;\n  height: auto;\n  max-width: 100%;\n  width: auto;\n  -ms-interpolation-mode: bicubic;\n}\n\nhtml:-moz-full-screen-ancestor {\n  background-color: inherit;\n}\n\nhtml:-webkit-full-screen-ancestor {\n  background-color: inherit;\n}\n\nhtml:full-screen-ancestor {\n  background-color: inherit;\n}\n\n/**\n * Base: Colours\n */\n/**\n * Base: Typography\n */\n@font-face {\n  font-family: \"Code Pro\";\n  src: url(\"../assets/fonts/Code Pro/Code Pro Light.eot?iefix\");\n  src: url(\"../assets/fonts/Code Pro/Code Pro Light.eot?iefix\") format(\"eot\"), local(\"☺\"), url(\"../assets/fonts/Code Pro/Code Pro Light.woff\") format(\"woff\"), url(\"../assets/fonts/Code Pro/Code Pro Light.ttf\") format(\"truetype\"), url(\"../assets/fonts/Code Pro/Code Pro Light.svg#Code Pro Light\") format(\"svg\");\n  font-weight: 200;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: \"Code Pro\";\n  src: url(\"../assets/fonts/Code Pro/Code Pro Regular.eot?iefix\");\n  src: url(\"../assets/fonts/Code Pro/Code Pro Regular.eot?iefix\") format(\"eot\"), local(\"☺\"), url(\"../assets/fonts/Code Pro/Code Pro Regular.woff\") format(\"woff\"), url(\"../assets/fonts/Code Pro/Code Pro Regular.ttf\") format(\"truetype\"), url(\"../assets/fonts/Code Pro/Code Pro Regular.svg#Code Pro Regular\") format(\"svg\");\n  font-weight: 400;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: \"Code Pro\";\n  src: url(\"../assets/fonts/Code Pro/Code Pro Bold.eot?iefix\");\n  src: url(\"../assets/fonts/Code Pro/Code Pro Bold.eot?iefix\") format(\"eot\"), local(\"☺\"), url(\"../assets/fonts/Code Pro/Code Pro Bold.woff\") format(\"woff\"), url(\"../assets/fonts/Code Pro/Code Pro Bold.ttf\") format(\"truetype\"), url(\"../assets/fonts/Code Pro/Code Pro Bold.svg#Code Pro Bold\") format(\"svg\");\n  font-weight: 600;\n  font-style: normal;\n}\n\nhtml, body {\n  font-family: \"Code Pro\";\n  text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.004);\n  text-rendering: optimizeLegibility !important;\n  -webkit-font-smoothing: antialiased !important;\n}\n\nhtml {\n  font-size: 16px;\n  line-height: 1.5em;\n  font-family: Code Pro;\n  font-weight: 200;\n}\n\nh1 {\n  font-size: 2.5em;\n  line-height: 1.575em;\n  font-family: Code Pro;\n  font-weight: 200;\n}\n\nh2 {\n  font-size: 2.25em;\n  line-height: 1.25em;\n  font-family: Code Pro;\n  font-weight: 200;\n}\n\nh3 {\n  font-size: 1.625em;\n  line-height: 1.73076923077em;\n  font-family: Code Pro;\n  font-weight: 400;\n}\n\nh4 {\n  font-family: Code Pro;\n  font-size: 1.25em;\n  font-weight: 400;\n  line-height: 1.25em;\n}\n\nh5 {\n  font-family: Code Pro;\n  font-size: 1.25em;\n  line-height: 1.25em;\n}\n\nh6 {\n  font-family: Code Pro;\n  font-size: 1em;\n  line-height: 1.5em;\n}\n\np {\n  font-family: Code Pro;\n  font-size: 1.0625em;\n  line-height: 1.35294117647em;\n}\n\na {\n  font-family: Code Pro;\n  font-size: 0.9375em;\n  text-transform: uppercase;\n}\n\n.col.-col-1-6 {\n  padding: 0.75em 0.3125em;\n  width: 16.6666666667%;\n}\n\n.col.-col-2-6 {\n  padding: 0.75em 0.3125em;\n  width: 33.3333333333%;\n}\n\n.col.-col-3-6 {\n  padding: 0.75em 0.3125em;\n  width: 50%;\n}\n\n.col.-col-4-6 {\n  padding: 0.75em 0.3125em;\n  width: 66.6666666667%;\n}\n\n.col.-col-5-6 {\n  padding: 0.75em 0.3125em;\n  width: 83.3333333333%;\n}\n\n.col.-col-6-6 {\n  padding: 0.75em 0.3125em;\n  width: 100%;\n}\n\n@media (min-width: 30em) {\n  .col.-phablet-col-1-6 {\n    padding: 0.75em 0.3125em;\n    width: 16.6666666667%;\n  }\n  .col.-phablet-col-2-6 {\n    padding: 0.75em 0.3125em;\n    width: 33.3333333333%;\n  }\n  .col.-phablet-col-3-6 {\n    padding: 0.75em 0.3125em;\n    width: 50%;\n  }\n  .col.-phablet-col-4-6 {\n    padding: 0.75em 0.3125em;\n    width: 66.6666666667%;\n  }\n  .col.-phablet-col-5-6 {\n    padding: 0.75em 0.3125em;\n    width: 83.3333333333%;\n  }\n  .col.-phablet-col-6-6 {\n    padding: 0.75em 0.3125em;\n    width: 100%;\n  }\n}\n\n@media (min-width: 48em) {\n  .col.-tablet-col-1-6 {\n    padding: 0.75em 0.625em;\n    width: 16.6666666667%;\n  }\n  .col.-tablet-col-2-6 {\n    padding: 0.75em 0.625em;\n    width: 33.3333333333%;\n  }\n  .col.-tablet-col-3-6 {\n    padding: 0.75em 0.625em;\n    width: 50%;\n  }\n  .col.-tablet-col-4-6 {\n    padding: 0.75em 0.625em;\n    width: 66.6666666667%;\n  }\n  .col.-tablet-col-5-6 {\n    padding: 0.75em 0.625em;\n    width: 83.3333333333%;\n  }\n  .col.-tablet-col-6-6 {\n    padding: 0.75em 0.625em;\n    width: 100%;\n  }\n}\n\n@media (min-width: 64em) {\n  .col.-laptop-col-1-6 {\n    padding: 0.75em 0.625em;\n    width: 16.6666666667%;\n  }\n  .col.-laptop-col-2-6 {\n    padding: 0.75em 0.625em;\n    width: 33.3333333333%;\n  }\n  .col.-laptop-col-3-6 {\n    padding: 0.75em 0.625em;\n    width: 50%;\n  }\n  .col.-laptop-col-4-6 {\n    padding: 0.75em 0.625em;\n    width: 66.6666666667%;\n  }\n  .col.-laptop-col-5-6 {\n    padding: 0.75em 0.625em;\n    width: 83.3333333333%;\n  }\n  .col.-laptop-col-6-6 {\n    padding: 0.75em 0.625em;\n    width: 100%;\n  }\n}\n\n@media (min-width: 85.375em) {\n  .col.-desktop-col-1-6 {\n    padding: 0.75em 0.625em;\n    width: 16.6666666667%;\n  }\n  .col.-desktop-col-2-6 {\n    padding: 0.75em 0.625em;\n    width: 33.3333333333%;\n  }\n  .col.-desktop-col-3-6 {\n    padding: 0.75em 0.625em;\n    width: 50%;\n  }\n  .col.-desktop-col-4-6 {\n    padding: 0.75em 0.625em;\n    width: 66.6666666667%;\n  }\n  .col.-desktop-col-5-6 {\n    padding: 0.75em 0.625em;\n    width: 83.3333333333%;\n  }\n  .col.-desktop-col-6-6 {\n    padding: 0.75em 0.625em;\n    width: 100%;\n  }\n}\n\n/**\n * Layout: Header\n */\n/**\n * Layout: Footer\n */\n/**\n * Components: Debug\n */\nbody::after {\n  background: linear-gradient(to bottom, #1c2124 0%, #292d33 100%);\n  bottom: 0;\n  color: #73bcee;\n  padding: 0.625em;\n  position: fixed;\n  right: 0;\n  transition: opacity 0.3s;\n}\n\n@media (min-width: 0em) {\n  body::after {\n    content: \"default / min 0px / 6 cols\";\n  }\n}\n\n@media (min-width: 30em) {\n  body::after {\n    content: \"phablet / min 480px / 6 cols\";\n  }\n}\n\n@media (min-width: 48em) {\n  body::after {\n    content: \"tablet / min 768px / 6 cols\";\n  }\n}\n\n@media (min-width: 64em) {\n  body::after {\n    content: \"laptop / min 1024px / 6 cols\";\n  }\n}\n\n@media (min-width: 85.375em) {\n  body::after {\n    content: \"desktop / min 1366px / 6 cols\";\n  }\n}\n\n/**\n * Components: Buttons\n */\n/**\n * Components: Global Overlay\n *\n * Usage:\n *\n * <div id=\"global-overlay\">\n *     <div class=\"table\">\n *         <div class=\"td\">\n *             <div class=\"modal\">\n *             </div>\n *         </div>\n *     </div>\n * </div>\n *\n * Features:\n *\n * - Modal that stays centered to the screen\n *   but allows scrolling if the height of the\n *   content is taller than the viewport\n *\n * - Adding the class \"fullscreen\" to the\n *   #global-overlay element makes the\n *   modal fill the viewport, whilst\n *   still retaining its scrolling ability\n *   if the content is too tall\n */\n#global-overlay {\n  display: none;\n}\n\nbody.modal-visible {\n  overflow: hidden;\n}\n\nbody.modal-visible #global-overlay {\n  cursor: pointer;\n  display: block;\n  height: 100%;\n  left: 0;\n  overflow-y: auto;\n  position: fixed;\n  top: 0;\n  width: 100%;\n}\n\nbody.modal-visible #global-overlay .table {\n  background-color: rgba(0, 0, 0, 0.2);\n  display: table;\n  height: 100%;\n  width: 100%;\n}\n\nbody.modal-visible #global-overlay .table .td {\n  display: table-cell;\n  padding: 1.875em 0;\n  vertical-align: middle;\n}\n\nbody.modal-visible #global-overlay .table .td .modal {\n  background-color: #ffffff;\n  color: #000000;\n  cursor: default;\n  margin: 0 auto;\n  width: 50%;\n}\n\nbody.modal-visible #global-overlay.fullscreen .table {\n  display: block;\n}\n\nbody.modal-visible #global-overlay.fullscreen .table .td {\n  display: block;\n  height: 100%;\n  padding: 0;\n}\n\nbody.modal-visible #global-overlay.fullscreen .table .td .modal {\n  height: 100%;\n  margin: 0;\n  overflow-y: auto;\n  width: 100%;\n}\n","/**\n * Utils: Variables\n */\n\n// Colours\n$DARK-GREY: #333333;\n$LIGHT-GREY: #666666;\n\n// Maps\n\n/**\n * Breakpoints\n *\n * @key   {string} - Name of breakpoint\n * @value {string} - Type of breakpoint (min, max)\n * @value {int}    - Width that breakpoint starts\n * @value {int}    - Number of columns for grid\n * @value {int}    - Gutter width for each column\n * @value {int}    - Vertical Grid height\n */\n$BREAKPOINTS: (\n    default: min 0 6 10 24,\n    phablet: min 480 6 10 24,\n    tablet: min 768 6 20 24,\n    laptop: min 1024 6 20 24,\n    desktop: min 1366 6 20 24\n);\n\n/**\n * Type-scales\n *\n * @key   {string}       - Name of breakpoint\n * @key   {string}       - Name of element\n * @key   {string}       - Property\n * @value {string | int} - Value of property\n */\n$TYPE-SCALES: (\n    default: (\n        html: (\n            font-size: 16,\n            line-height: 24,\n            font-family: \"Code Pro\",\n            font-weight: 200    \n        ),\n        h1: (\n            font-size: 40,\n            line-height: 63,\n            font-family: \"Code Pro\",\n            font-weight: 200\n        ),\n        h2: (\n            font-size: 36,\n            line-height: 45,\n            font-family: \"Code Pro\",\n            font-weight: 200\n        ),\n        h3: (\n            font-size: 26,\n            line-height: 45,\n            font-family: \"Code Pro\",\n            font-weight: 400\n        ),\n        h4: (\n            font-family: \"Code Pro\",\n            font-size: 20,\n            font-weight: 400,\n            line-height: 25\n        ),\n        h5: (\n            font-family: \"Code Pro\",\n            font-size: 20,\n            line-height: 25\n        ),\n        h6: (\n            font-family: \"Code Pro\",\n            font-size: 16,\n            line-height: 24\n        ),\n        p: (\n            font-family: \"Code Pro\",\n            font-size: 17,\n            line-height: 23\n        ),\n        a: (\n            font-family: \"Code Pro\",\n            font-size: 15,\n            text-transform: uppercase\n        )\n    )\n);\n\n// Global variable decelerations because SASS doesn't support scope properly :(\n\n// Breakpoint\n$BREAKPOINTS-MAP: $BREAKPOINTS;\n$DEFAULT-BREAKPOINT: nth(map-keys($BREAKPOINTS-MAP), 1);\n$CURRENT-BREAKPOINT: $DEFAULT-BREAKPOINT;\n\n// Grid\n$DEFAULT-TOTAL-COLUMNS: nth(map-get($BREAKPOINTS-MAP, nth(map-keys($BREAKPOINTS-MAP), 1)), 3);\n$TOTAL-COLUMNS: $DEFAULT-TOTAL-COLUMNS;\n$DEFAULT-GUTTER-WIDTH: nth(map-get($BREAKPOINTS-MAP, nth(map-keys($BREAKPOINTS-MAP), 1)), 4);\n$GUTTER-WIDTH: $DEFAULT-GUTTER-WIDTH;\n$DEFAULT-VERTICAL-GRID-HEIGHT: nth(map-get($BREAKPOINTS-MAP, nth(map-keys($BREAKPOINTS-MAP), 1)), 5);\n$VERTICAL-GRID-HEIGHT: $DEFAULT-VERTICAL-GRID-HEIGHT;\n\n// Type scale\n$TYPE-SCALES-MAP: $TYPE-SCALES;","/**\n * Utils: Functions\n */\n\n/**\n * em\n *\n * Converts px value to em\n *\n * @param {int} $target  - Value to be converted\n * @param {int} $context - The context the `$target` will be divided by\n * @return {string}\n */\n@function em ($target, $context: getPropertyFromTypeScale(font-size, html, $CURRENT-BREAKPOINT), $breakpoint: $CURRENT-BREAKPOINT, $type-scale-map: $TYPE-SCALES-MAP) {\n\n    // $context is string\n    @if type-of($context) == string {\n\n        // Set $context as the font-size of $context\n        $context: getPropertyFromTypeScale(font-size, $context, $breakpoint, $type-scale-map);\n    }\n\n    @return #{$target / $context}em;\n};\n\n/**\n * lines\n *\n * @param {int} $lines   - Number of lines high you wish the element to be\n * @param {int} $context - Value of current font-size (Default: $DEFAULT-FONT-SIZE)\n * @return {string}\n */\n@function lines ($lines: 1, $context: getPropertyFromTypeScale(font-size, html, $CURRENT-BREAKPOINT), $breakpoint: $CURRENT-BREAKPOINT, $type-scale-map: $TYPE-SCALES-MAP) {\n\n    // $context is string\n    @if type-of($context) == string {\n\n        // Set $context as the font-size of $context\n        $context: getPropertyFromTypeScale(font-size, $context, $breakpoint, $type-scale-map);\n    }\n\n    // Return the value of line-height\n    @return em(($lines * $VERTICAL-GRID-HEIGHT), $context);\n};\n\n/**\n * getKeyOfIndexFromMap\n *\n * Returns the name of the key at $index of $map\n *\n * @param  {number} $index - The index of the key you want the name of\n * @param  {map}    $map   - The map you wish to search for $index in\n * @return {string}\n */\n@function getKeyOfIndexFromMap ($map, $index) {\n\n    // $map is a map\n    @if type-of($map) == map {\n\n        // $index is a number\n        @if type-of($index) == number {\n\n            // $index exists in $map\n            @if length($map) >= $index {\n\n                // Return the key of $index\n                @return nth(map-keys($map), $index);\n            }\n\n            // $index does not exist in $map, throw error\n            @else {\n                @error ('`$index` of `#{$index}` does not exist in `$map`');\n            }\n        }\n\n        // $index is not a number, throw error\n        @else {\n            @error ('`$index` of `#{$index}` is not a number');\n        }\n    }\n\n    // $map is not a map, throw error\n    @else {\n        @error ('`$map` is not a map');\n    }\n};\n\n/**\n * getIndexOfKeyFromMap\n *\n * Returns the index of the $key in $map\n *\n * @param  {map}    $map - The map you wish to search for $key in\n * @param  {string} $key - The key you wish to get the index of\n * @return {number}\n */\n@function getIndexOfKeyFromMap ($map, $key) {\n\n    // $map is a map\n    @if type-of($map) == map {\n\n        // $key exists in $map\n        @if map-has-key($map, $key) {\n\n            // Return the index of $key\n            @return index(map-keys($map), $key);\n        }\n\n        // $key does not exist in $map, throw error\n        @else {\n            @error ('`$key` of `#{$key}` does not exist in `$map`');\n        }\n    }\n\n    // $map is not a map, throw error\n    @else {\n        @error ('`$map` is not a map');\n    }\n};\n\n/**\n * getValueOfKeyFromMap\n *\n * Returns the value of $key in $map\n *\n * @param  {map}           $map - The map you wish to search for the value of $key in\n * @param  {string}        $key - The key you wish to get the value for\n * @return {number|string}\n */\n@function getValueOfKeyFromMap ($map, $key) {\n\n    // $map is a map\n    @if type-of($map) == map {\n\n        // $key exists in $map\n        @if map-has-key($map, $key) {\n            @return map-get($map, $key);\n        }\n\n        // $key does not exist in $map, throw error\n        @else {\n            @error ('`$key` of `#{$key}` does not exist in `$map`');\n        }\n    }\n\n    // $map is not a map, throw error\n    @else {\n        @error ('`$map` is not a map');\n    }\n};\n\n/**\n * getTypeScaleFromBreakpoint\n *\n * Returns the value of $type-scale in $breakpoint of $type-scale-map\n * Searches recursively backwards through $type-scale-map if $type-scale is not found in $breakpoint\n *\n * @param  {string}        $type-scale - The property that you wish to get the value of\n * @param  {string}        $breakpoint - The breakpoint that you wish to search\n * @return {number|string}\n */\n @function getTypeScaleFromBreakpoint ($type-scale, $breakpoint: getKeyOfIndexFromMap($TYPE-SCALES-MAP, 1), $type-scale-map: $TYPE-SCALES-MAP, $breakpoint-map: $BREAKPOINTS-MAP) {\n\n     // $breakpoint-map is a map\n     @if type-of($breakpoint-map) == map {\n\n         // $breakpoint exists in $breakpoint-map\n         @if map-has-key($breakpoint-map, $breakpoint) {\n\n             // $type-scale-map is a map\n             @if type-of($type-scale-map) == map {\n\n                 // $breakpoint exists in $type-scale-map\n                 @if map-has-key($type-scale-map, $breakpoint) {\n\n                     // $type-scale exists in $breakpoint\n                     @if map-has-key(map-get($type-scale-map, $breakpoint), $type-scale) {\n\n                         // Return the value of $type-scale\n                         @return getValueOfKeyFromMap(map-get($type-scale-map, $breakpoint), $type-scale);\n                     }\n\n                     // $type-scale does not exist in $breakpoint\n                     @else {\n\n                         // $breakpoint is not the lowest breakpoint in $type-scale-map\n                         @if index(map-keys($type-scale-map), $breakpoint) > 1 {\n\n                             // Run this function again searching one breakpoint lower for $type-scale\n                             @return getTypeScaleFromBreakpoint($type-scale, getKeyOfIndexFromMap($breakpoint-map, getIndexOfKeyFromMap($breakpoint-map, $breakpoint) - 1), $type-scale-map, $breakpoint-map);\n                         }\n\n                         // $breakpoint is the lowest breakpoint in $type-scale-map\n                         @else {\n\n                             // $type-scale does not exist in $type-scale-map, throw error\n                             @error ('`$type-scale` of `#{$type-scale}` does not exist in `$type-scale-map`');\n                         }\n                     }\n                 }\n\n                 // $breakpoint does not exist in $type-scale-map\n                 @else {\n\n                     // $breakpoint is not the lowest breakpoint in $breakpoint-map\n                     @if index(map-keys($breakpoint-map), $breakpoint) > 1 {\n\n                         // Run this function again searching one breakpoint lower for $type-scale\n                         @return getTypeScaleFromBreakpoint($type-scale, getKeyOfIndexFromMap($breakpoint-map, getIndexOfKeyFromMap($breakpoint-map, $breakpoint) - 1), $type-scale-map, $breakpoint-map);\n                     }\n\n                     // $breakpoint is the lowest breakpoint in $breakpoint-map\n                     @else {\n\n                         // $type-scale does not exist in $type-scale-map, throw error\n                         @error ('`$type-scale` of `#{$type-scale}` does not exist in `$type-scale-map`');\n                     }\n                 }\n             }\n\n             // $type-scale-map is not a map, throw error\n             @else {\n                  @error ('`$type-scale-map` is not a map');\n             }\n         }\n\n         // $breakpoint does not exist in $breakpoint-map, throw error\n         @else {\n              @error ('`$breakpoint` of `#{$breakpoint}` does not exist in `$breakpoint-map`');\n         }\n     }\n\n     // $breakpoint-map is not a map, throw error\n     @else {\n          @error ('`$breakpoint-map` is not a map');\n     }\n };\n\n/**\n * getPropertyFromTypeScale\n *\n * Returns the value of $property of $type-scale in $breakpoint of $type-scale-map\n *\n * @param  {string}        $property       - The property you wish to get the value of\n * @param  {string}        $type-scale     - The type-scale you wish to get $property from\n * @param  {string}        $breakpoint     - The breakpoint you want to $property from $type-scale in\n * @param  {map}           $type-scale-map - The map you wish to search for $breakpoint\n * @return {number|string}\n */\n@function getPropertyFromTypeScale ($property, $type-scale, $breakpoint: getKeyOfIndexFromMap($TYPE-SCALES-MAP, 1), $type-scale-map: $TYPE-SCALES-MAP, $breakpoint-map: $BREAKPOINTS-MAP) {\n\n    // $breakpoint-map is a map\n    @if type-of($breakpoint-map) == map {\n\n        // $breakpoint exists in $breakpoint-map\n        @if map-has-key($breakpoint-map, $breakpoint) {\n\n            // $type-scale-map is a map\n            @if type-of($type-scale-map) == map {\n\n                // $breakpoint exists in $type-scale-map\n                @if map-has-key($type-scale-map, $breakpoint) {\n\n                    // $type-scale has $property\n                    @if map-has-key(getTypeScaleFromBreakpoint($type-scale, $breakpoint, $type-scale-map, $breakpoint-map), $property) {\n\n                        // Return the value of $property\n                        @return map-get(getTypeScaleFromBreakpoint($type-scale, $breakpoint, $type-scale-map, $breakpoint-map), $property);\n                    }\n\n                    // $type-scale does not have $property, throw error\n                    @else {\n                        @error ('`$type-scale` of `#{$type-scale}` does not have `$property` of `#{$property}`');\n                    }\n                }\n\n                // $breakpoint does not exist in $type-scale-map\n                @else {\n\n                    // $breakpoint is not the lowest breakpoint in $breakpoint-map\n                    @if index(map-keys($breakpoint-map), $breakpoint) > 1 {\n\n                        // Run this function again searching one breakpoint lower for $type-scale\n                        @return getPropertyFromTypeScale($property, $type-scale, getKeyOfIndexFromMap($breakpoint-map, getIndexOfKeyFromMap($breakpoint-map, $breakpoint) - 1), $type-scale-map, $breakpoint-map);\n                    }\n\n                    // $breakpoint is the lowest breakpoint in $breakpoint-map\n                    @else {\n\n                        // $type-scale does not exist in $type-scale-map, throw error\n                        @error ('`$type-scale` of `#{$type-scale}` does not exist in `$type-scale-map`');\n                    }\n                }\n            }\n\n            // $type-scale-map is not a map, throw error\n            @else {\n                @error ('`$type-scale-map` is not a map');\n            }\n        }\n\n        // $breakpoint does not exist in $breakpoint-map, throw error\n        @else {\n            @error ('`$breakpoint` of `#{$breakpoint}` does not exist in `$breakpoint-map`');\n        }\n    }\n\n    // $breakpoint-map is not a map, throw error\n    @else {\n        @error ('`$breakpoint-map` is not a map');\n    }\n};\n\n/**\n * getAllPropertiesFromTypeScale\n * @param  {string} $type-scale     - The type scale you wish to get the properties of\n * @param  {string} $breakpoint:    - The breakpoint you wish to get $type-scale from\n * @param  {map}    $type-scale-map - The map you wish to search for $breakpoint\n * @return {map}\n */\n@function getAllPropertiesFromTypeScale ($type-scale, $breakpoint: getKeyOfIndexFromMap($TYPE-SCALES-MAP, 1), $type-scale-map: $TYPE-SCALES-MAP, $breakpoint-map: $BREAKPOINTS-MAP) {\n\n    // $breakpoint-map is a map\n    @if type-of($breakpoint-map) == map {\n\n        // $breakpoint exists in $breakpoint-map\n        @if map-has-key($breakpoint-map, $breakpoint) {\n\n            // $type-scale-map is a map\n            @if type-of($type-scale-map) == map {\n\n                // $breakpoint exists in $type-scale-map\n                @if map-has-key($type-scale-map, $breakpoint) {\n\n                    // Create an empty map to hold all properties of $type-scale\n                    $properties: ();\n\n                    // The index of $breakpoint in $breakpoint-map\n                    $indexOfBreakpoint: index(map-keys($breakpoint-map), $breakpoint);\n\n                    // $indexOfBreakpoint is greater than one\n                    @if $indexOfBreakpoint > 1 {\n\n                        // While $indexOfBreakpoint is greater than or equal to one\n                        @while $indexOfBreakpoint >= 1 {\n\n                            // Add the properties of $type-scale to $properties\n                            $properties: map-merge(getTypeScaleFromBreakpoint($type-scale, getKeyOfIndexFromMap($breakpoint-map, $indexOfBreakpoint), $type-scale-map, $breakpoint-map), $properties);\n\n                            // Decrement $indexOfBreakpoint\n                            $indexOfBreakpoint: $indexOfBreakpoint - 1;\n                        }\n\n                        // Return $properties\n                        @return $properties;\n                    }\n\n                    // $indexOfBreakpoint is one\n                    @else {\n\n                        // Return the properties of $type-scale\n                        @return getTypeScaleFromBreakpoint($type-scale, $breakpoint, $type-scale-map, $breakpoint-map);\n                    }\n                }\n\n                // $breakpoint does not exist in $type-scale-map\n                @else {\n\n                    // $breakpoint is not the lowest breakpoint in $breakpoint-map\n                    @if index(map-keys($breakpoint-map), $breakpoint) > 1 {\n\n                        // Run this function again searching one breakpoint lower for $type-scale\n                        @return getAllPropertiesFromTypeScale($type-scale, getKeyOfIndexFromMap($breakpoint-map, getIndexOfKeyFromMap($breakpoint-map, $breakpoint) - 1), $type-scale-map, $breakpoint-map);\n                    }\n\n                    // $breakpoint is the lowest breakpoint in $breakpoint-map\n                    @else {\n\n                        // $type-scale does not exist in $type-scale-map, throw error\n                        @error ('`$type-scale` of `#{$type-scale}` does not exist in `$type-scale-map`');\n                    }\n                }\n            }\n\n            // $type-scale-map is not a map, throw error\n            @else {\n                @error ('`$type-scale-map` is not a map');\n            }\n        }\n\n        // $breakpoint does not exist in $breakpoint-map, throw error\n        @else {\n            @error ('`$breakpoint` of `#{$breakpoint}` does not exist in `$breakpoint-map`');\n        }\n    }\n\n    // $breakpoint-map is not a map, throw error\n    @else {\n        @error ('`$breakpoint-map` is not a map');\n    }\n};","/**\n * Utils: Mixins\n */\n\n/**\n * breakpoint\n *\n * Iterate through $BREAKPOINTS and generate media queries\n *\n * @param {string} $breakpoint - Key in $BREAKPOINTS map\n */\n@mixin breakpoint ($breakpoint) {\n    @if map-has-key ($BREAKPOINTS, $breakpoint) {\n        $point-data: map-get($BREAKPOINTS, $breakpoint);\n        $point-type: #{nth($point-data, 1)}-width;\n        $point-width: nth($point-data, 2);\n        $point-cols: nth($point-data, 3);\n        $point-gutter-width: nth($point-data, 4);\n        $point-vertical-grid-height: nth($point-data, 5);\n\n        @media (#{$point-type}: #{$point-width / getPropertyFromTypeScale(font-size, html, $CURRENT-BREAKPOINT)}em) {\n            $TOTAL-COLUMNS: $point-cols !global;\n            $GUTTER-WIDTH: $point-gutter-width !global;\n            $CURRENT-BREAKPOINT: $breakpoint !global;\n            $VERTICAL-GRID-HEIGHT: $point-vertical-grid-height !global;\n\n            @content;\n\n            $TOTAL-COLUMNS: $DEFAULT-TOTAL-COLUMNS !global;\n            $GUTTER-WIDTH: $DEFAULT-GUTTER-WIDTH !global;\n            $CURRENT-BREAKPOINT: $DEFAULT-BREAKPOINT !global;\n            $VERTICAL-GRID-HEIGHT: $DEFAULT-VERTICAL-GRID-HEIGHT;\n        }\n    }\n};\n\n/**\n * generateFont\n *\n * Generate font-face declaration\n * Assumes you follow the following directory structure:\n *\n * /\n * |- fonts/\n *   |- fontname\n *     |- fontname.eot\n *     |- fontname.woff\n *     |- fontname.ttf\n *     |- fontname.svg\n *\n * @param {string} $fontName - Name of the font to be used when declared\n * @param {string} $fontFileName - Filename of the font\n * @param {int} $fontWeight - Weight of the font (100, 200, 300, 400, 500, 600, 700, 800 | Default: 400)\n * @param {string} $fontStyle - Style of the font (normal, italic, oblique | Default: normal)\n */\n@mixin generateFont ($fontName, $fontFileName, $fontWeight: 400, $fontStyle: normal) {\n    @font-face {\n        font-family: $fontName;\n        src: url('../assets/fonts/#{$fontName}/#{$fontFileName}.eot?iefix');\n        src: url('../assets/fonts/#{$fontName}/#{$fontFileName}.eot?iefix') format(\"eot\"),\n             local('☺'), url('../assets/fonts/#{$fontName}/#{$fontFileName}.woff') format(\"woff\"),\n             url('../assets/fonts/#{$fontName}/#{$fontFileName}.ttf') format(\"truetype\"),\n             url('../assets/fonts/#{$fontName}/#{$fontFileName}.svg##{$fontFileName}') format(\"svg\");\n        font-weight: $fontWeight;\n        font-style: $fontStyle;\n    }\n};\n\n/**\n * setTypeScale\n *\n * @param {string} $type-scale - The style you wish to use from $TYPE-SCALES-MAP\n * @param {number} $context    - The context of the current type-scale\n * @param {string} $breakpoint - The breakpoint in which you wish to get the $style from\n */\n@mixin setTypeScale ($type-scale, $context: getPropertyFromTypeScale(font-size, html, $CURRENT-BREAKPOINT), $breakpoint: $CURRENT-BREAKPOINT, $type-scale-map: $TYPE-SCALES-MAP, $breakpoint-map: $BREAKPOINTS-MAP) {\n\n    // $context is string\n    @if type-of($context) == string {\n\n        // Set $context as the font-size of $context\n        $context: getPropertyFromTypeScale(font-size, $context, $breakpoint, $type-scale-map, $breakpoint-map);\n    }\n\n    // $properties holds all the properties of $type-scale\n    $properties: getAllPropertiesFromTypeScale($type-scale, $breakpoint, $type-scale-map);\n\n    // Loop through $properties\n    @each $property, $value in $properties {\n\n        // $property is font-size\n        @if $property == font-size {\n\n            // $type-scale is html\n            @if $type-scale == html {\n\n                // Set the font-size property as px\n                font-size: #{getPropertyFromTypeScale(font-size, html, $breakpoint, $type-scale-map)}px;\n            }\n\n            // $type-scale is not html\n            @else {\n\n                // Set the font-size as em\n                font-size: #{getPropertyFromTypeScale(font-size, $type-scale, $breakpoint, $type-scale-map) / $context}em;\n\n                // Set $context as the font-size of $type-scale\n                $context: getPropertyFromTypeScale(font-size, $type-scale, $breakpoint, $type-scale-map);\n            }\n        }\n\n        // $property is font-weight\n        @else if $property == font-weight {\n\n            // Set the $value of $property\n            font-weight: #{$value};\n        }\n\n        // $property is not font-size or font-weight\n        @else {\n\n            // $value of $property is a number\n            @if type-of($value) == number {\n\n                // Set the $value of $property based on the font-size of html\n                #{$property}: #{$value / $context}em;\n            }\n\n            // $value is not a number\n            @else {\n\n                // Set the $value of $property\n                #{$property}: #{$value};\n            }\n        }\n    }\n};\n\n/**\n * generateTypeScaleStyles\n *\n * @param {map} $type-scale-map - The map you want to generate the typescales from (Default: $TYPE-SCALES-MAP)\n */\n@mixin generateTypeScaleStyles ($type-scale-map: $TYPE-SCALES-MAP, $breakpoint-map: $BREAKPOINTS-MAP) {\n\n    // $breakpoint-map is a map\n    @if type-of($breakpoint-map) == map {\n\n        // $type-scale-map is a map\n        @if type-of($type-scale-map) == map {\n\n            // Loop over each breakpoint in $type-scale-map\n            @each $breakpoint in map-keys($type-scale-map) {\n\n                // $breakpoint has type scales\n                @if length(map-get($type-scale-map, $breakpoint)) > 0 {\n\n                    // $breakpoint is the first breakpoint in $breakpoint-map\n                    @if index(map-keys($breakpoint-map), $breakpoint) == 1 {\n\n                        // Loop over each type scale in $breakpoint\n                        @each $type-scale in map-keys(map-get($type-scale-map, $breakpoint)) {\n\n                            // Create the type scale\n                            #{$type-scale} {\n\n                                // Set the properties for the type scale\n                                @include setTypeScale($type-scale);\n                            }\n                        }\n                    }\n\n                    // $breakpoint is not the first breakpoint in $breakpoint-map\n                    @else {\n\n                        // Wrap the type scale in a breakpoint of $breakpoint\n                        @include breakpoint ($breakpoint) {\n\n                            // Loop over each type scale in $breakpoint\n                            @each $type-scale in map-keys(map-get($type-scale-map, $breakpoint)) {\n\n                                // Create the type scale\n                                #{$type-scale} {\n\n                                    // Set the properties for the type scale\n                                    @include setTypeScale($type-scale);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        // $type-scale-map is not a map, throw error\n        @else {\n            @error ('`$type-scale-map` is not a map');\n        }\n    }\n\n    // $breakpoint-map is not a map, throw error\n    @else {\n        @error ('`$breakpoint-map` is not a map');\n    }\n};\n\n/**\n * generateGridStyles\n *\n * @param {map} $type-scale-map - The map you want to generate the typescales from (Default: $TYPE-SCALES-MAP)\n */\n@mixin generateGridStyles ($breakpoint-map: $BREAKPOINTS-MAP) {\n\n    // $breakpoint-map is a map\n    @if type-of($breakpoint-map) == map {\n\n        // Loop over each breakpoint in $breakpoint-map\n        @each $breakpoint in map-keys($breakpoint-map) {\n\n            // If `$breakpoint` is `default`\n            @if $breakpoint == 'default' {\n\n                // Loop through all the columns in that breakpoint\n                @for $i from 1 through $TOTAL-COLUMNS {\n\n                    // Generate the column\n                    .col.-col-#{$i}-#{$TOTAL-COLUMNS} {\n                        padding: em($VERTICAL-GRID-HEIGHT / 2) em($GUTTER-WIDTH / 2);\n                        width: percentage($i / $TOTAL-COLUMNS);\n                    }\n                }\n            }\n\n            // If `$breakpoint` is not `default`\n            @else {\n\n                // Wrap in a breakpoint\n                @include breakpoint($breakpoint) {\n\n                    // Loop through all the columns in that breakpoint\n                    @for $i from 1 through $TOTAL-COLUMNS {\n\n                        // Generate the column\n                        .col.-#{$breakpoint}-col-#{$i}-#{$TOTAL-COLUMNS} {\n                            padding: em($VERTICAL-GRID-HEIGHT / 2) em($GUTTER-WIDTH / 2);\n                            width: percentage($i / $TOTAL-COLUMNS);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // $breakpoint-map is not a map, throw error\n    @else {\n        @error ('`$breakpoint-map` is not a map');\n    }\n};\n\n// Clearfix\n@mixin clearfix () {\n    &:after {\n        clear: both;\n        content: '';\n        display: table;\n    }\n}\n\n// Vertical align\n@mixin verticalAlign () {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    justify-content: center;\n    width: 100%;\n}\n\n// Align\n@mixin align ($align) {\n    @if $align == left {\n        margin: auto auto auto 0;\n    }\n\n    @else if $align == right {\n        margin: auto 0 auto auto;\n    }\n\n    @else if $align == center {\n        margin: 0 auto 0 auto;\n    }\n\n    @else if $align == top {\n        margin: 0 auto auto auto;\n    }\n\n    @else if $align == bottom {\n        margin: auto auto 0 auto;\n    }\n};\n\n// Gutter for column\n@mixin gutter ($gutter) {\n    @if $gutter == no {\n        padding: {\n            left: 0;\n            right: 0;\n        }\n    }\n\n    @else {\n        padding: {\n            left: em($gutter);\n            right: em($gutter);\n        }\n    }\n}\n\n// Grid\n@mixin grid ($width: 100%, $align: center, $max-width: null) {\n    @include align($align);\n    @include clearfix();\n    @include gutter($GRID-MARGIN);\n\n    @if $max-width != null {\n        max-width: $max-width;\n    }\n\n    width: $width;\n};\n\n// Column\n@mixin column ($width: $TOTAL-COLUMNS, $gutter: $GUTTER-WIDTH, $context: $TOTAL-COLUMNS) {\n    @include gutter($gutter);\n\n    float: left;\n    width: percentage($width / $context);\n};\n\n// Vertical baseline background guide\n@mixin verticalBaseline ($height: $VERTICAL-GRID-HEIGHT, $style: 'lines', $colour: rgba(0, 255, 255, 0.3)) {\n\n    // $style is lines\n    @if $style == 'lines' {\n        background-image: linear-gradient(to bottom, transparent 95%, $colour 100%);\n        background-size: 100% em($height);\n    }\n\n    // Style is bars\n    @else if $style == 'bars' {\n        background-image: linear-gradient(to bottom, transparent 50%, $colour 50%);\n        background-size: 100% em($height * 2);\n    }\n\n    // $style is not lines or bars, throw error\n    @else {\n        @error ('`$style` of `#{$style}` needs to be either `lines` or `bars`');\n    }\n}","/**\n * Utils: Placeholders\n */\n\n* {\n    box-sizing: border-box; \n}\n\nhtml, body {\n    background-color: black;\n}\n\n// Clearfix\n%clearfix:after {\n    clear: both;\n    content: '';\n    display: table;\n}\n\n.clearfix {\n    @extend %clearfix;\n}\n\n// Vertical align\n%vertical-align {\n    position: relative;\n    top: 50%;\n    transform: translateY(-50%);\n}\n// Absolute center align\n%absolute-center-align {\n    left: 50%;\n    position: relative;\n    top: 50%;\n    transform: translate(-50%, -50%);\n}\n\n","/**\n * Base: Reset\n */\n\n// All the things reset\n*, *:before, *:after {\n    border: 0;\n    box-sizing: border-box;\n    font: {\n        family: inherit;\n        size: 100%;\n        smoothing: antialiased;\n    }\n    line-height: inherit;\n    margin: 0;\n    outline: 0;\n    padding: 0;\n    vertical-align: baseline;\n}\n\n// Block level elements\naddress, article, aside, audio, blockquote,\ncanvas, dd, div, dl, fieldset, figcaption,\nfigure, footer, form, h1, h2, h3, h4, h5, h6,\nheader, hr, noscript, ol, output, p, pre,\nsection, ul, video {\n    display: block;\n}\n\n// Inline level elements\na, abbr, b, bdo, br, button, cite, code, dfn,\nem, i, img, input, kbd, label, map, object, q,\nsamp, select, small, span, strong, sub, sup,\ntextarea, var {\n    display: inline;\n}\n\n// Reset Table\ntable {\n    border-collapse: collapse;\n    border-spacing: 0;\n    display: table;\n}","/**\n * Base: Normalise\n */\n\nhtml {\n    font: {\n        family: Arial, sans-serif;\n        size: 16px;\n    }\n    height: 100%;\n    line-height: 1.5em;\n    min-height: 100%;\n    text-size-adjust: 100%;\n    width: 100%;\n}\n\nbody {\n    font: {\n        size: 100%;\n        smoothing: antialiased;\n    }\n    height: 100%;\n    min-height: 100%;\n    position: relative;\n    text-rendering: optimizeLegibility;\n    width: 100%;\n}\n\nimg {\n    border: 0;\n    display: block;\n    height: auto;\n    max-width: 100%;\n    width: auto;\n    -ms-interpolation-mode: bicubic;\n}\n\n// Make sure background color stays the same when in fullscreen mode\nhtml:-moz-full-screen-ancestor {\n    background-color: inherit;\n}\n\nhtml:-webkit-full-screen-ancestor {\n    background-color: inherit;\n}\n\nhtml:full-screen-ancestor {\n    background-color: inherit;\n}\n","/**\n * Base: Colours\n */\n\n$blue: #58a3ee;\n$bg-blue: #59a3ec;\n$black: rgba(0,0,0,0.7)\n","/**\n * Base: Typography\n */\n\n// Code Pro //\n\n@include generateFont('Code Pro', 'Code Pro Light', 200);\n@include generateFont('Code Pro', 'Code Pro Regular', 400);\n@include generateFont('Code Pro', 'Code Pro Bold', 600);\n\nhtml, body {\n    font-family: \"Code Pro\";\n    text-shadow: 1px 1px 1px rgba(0,0,0,0.004);\n\ttext-rendering: optimizeLegibility !important;\n\t-webkit-font-smoothing: antialiased !important;\n}\n\n\n// Generate type-scale elements\n@include generateTypeScaleStyles();","/**\n * Layout: Header\n */ \n ","/**\n * Layout: Footer\n */","/**\n * Components: Debug\n */\n\nbody::after {\n    background: linear-gradient(to bottom, #1c2124 0%, #292d33 100%);\n    bottom: 0;\n    color: #73bcee;\n    padding: em(10);\n    position: fixed;\n    right: 0;\n    transition: opacity 0.3s;\n\n    @each $breakpoint, $value in $BREAKPOINTS {\n        @include breakpoint($breakpoint) {\n            @if $breakpoint == mobile {\n                content: \"#{$breakpoint} / #{nth($value, 3)} cols\";\n            } @else {\n                content: \"#{$breakpoint} / #{nth($value, 1)} #{nth($value, 2)}px / #{nth($value, 3)} cols\";\n            }\n\n        }\n    }\n}","/**\n * Components: Buttons\n */","/**\n * Components: Global Overlay\n *\n * Usage:\n *\n * <div id=\"global-overlay\">\n *     <div class=\"table\">\n *         <div class=\"td\">\n *             <div class=\"modal\">\n *             </div>\n *         </div>\n *     </div>\n * </div>\n *\n * Features:\n *\n * - Modal that stays centered to the screen\n *   but allows scrolling if the height of the\n *   content is taller than the viewport\n *\n * - Adding the class \"fullscreen\" to the\n *   #global-overlay element makes the\n *   modal fill the viewport, whilst\n *   still retaining its scrolling ability\n *   if the content is too tall\n */\n\n#global-overlay {\n    display: none;\n}\n\nbody.modal-visible {\n    overflow: hidden;\n\n    #global-overlay {\n        cursor: pointer;\n        display: block;\n        height: 100%;\n        left: 0;\n        overflow-y: auto;\n        position: fixed;\n        top: 0;\n        width: 100%;\n\n        .table {\n            background-color: rgba(0, 0, 0, 0.2);\n            display: table;\n            height: 100%;\n            width: 100%;\n\n            .td {\n                display: table-cell;\n                padding: em(30) 0;\n                vertical-align: middle;\n\n                .modal {\n                    background-color: #ffffff;\n                    color: #000000;\n                    cursor: default;\n                    margin: 0 auto;\n                    width: 50%;\n                }\n            }\n        }\n\n        &.fullscreen {\n            .table {\n                display: block;\n\n                .td {\n                    display: block;\n                    height: 100%;\n                    padding: 0;\n\n                    .modal {\n                        height: 100%;\n                        margin: 0;\n                        overflow-y: auto;\n                        width: 100%;\n                    }\n                }\n            }\n        }\n    }\n}"],"sourceRoot":"/source/"}